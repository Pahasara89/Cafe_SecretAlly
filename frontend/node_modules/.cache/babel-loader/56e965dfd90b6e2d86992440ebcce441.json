{"ast":null,"code":"import { USER_DELETE_FAIL, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from \"../constants/userConstants\";\nimport axios from \"axios\";\nexport const login = (email, password) => async dispatch => {\n  //nesting functions by redux\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    }); //returns login equals to true\n\n    const config = {\n      //making the api request\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); //calling user success if login succeed\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data)); //setting local storage to user info\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      //if the login not success set the payload to error\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  //calling user logout funtion\n  localStorage.removeItem(\"userInfo\"); // clearing user information from localstorage\n\n  dispatch({\n    type: USER_LOGOUT\n  }); //clearing from redux\n}; //taking values from registration form\n\nexport const register = (fname, lname, email, password, mnumber, hno, street, city, province, pic) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users\", {\n      fname,\n      lname,\n      email,\n      password,\n      mnumber,\n      hno,\n      street,\n      city,\n      province,\n      pic\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/profile\", user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteProfile = _id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete('/api/users/' + _id, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Cafe_SecretAlly/frontend/src/actions/userAction.js"],"names":["USER_DELETE_FAIL","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","fname","lname","mnumber","hno","street","city","province","pic","updateProfile","user","getState","userLogin","userInfo","Authorization","token","deleteProfile","_id","delete"],"mappings":"AAAA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,WAPF,EAQEC,kBARF,EASEC,qBATF,EAUEC,qBAVF,EAWEC,gBAXF,EAYEC,mBAZF,EAaEC,mBAbF,QAcO,4BAdP;AAeA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC5D;AACA,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEd;AAAR,KAAD,CAAR,CADE,CACsC;;AAExC,UAAMe,MAAM,GAAG;AACb;AACAC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFI,KAAf;AAOA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CACrB,kBADqB,EAErB;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAFqB,EAGrBG,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,kBAAR;AAA4BkB,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR,CAhBE,CAgBqD;;AAEvDG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC,EAlBE,CAkBsD;AACzD,GAnBD,CAmBE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEf,eADC;AACgB;AACvBoB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA9BM;AAgCP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAOd,QAAP,IAAoB;AAAE;AAC9CO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB,EAD4C,CACP;;AACrCf,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAR,CAF4C,CAEZ;AACnC,CAHM,C,CAIP;;AACA,OAAO,MAAM2B,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAepB,KAAf,EAAsBC,QAAtB,EAAgCoB,OAAhC,EAAyCC,GAAzC,EAA8CC,MAA9C,EAAsDC,IAAtD,EAA4DC,QAA5D,EAAsEC,GAAtE,KAA8E,MAAOxB,QAAP,IAAoB;AACtH,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AAEA,UAAMW,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CACnB,YADmB,EAEnB;AAACY,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAepB,MAAAA,KAAf;AAAsBC,MAAAA,QAAtB;AAAgCoB,MAAAA,OAAhC;AAAyCC,MAAAA,GAAzC;AAA8CC,MAAAA,MAA9C;AAAsDC,MAAAA,IAAtD;AAA4DC,MAAAA,QAA5D;AAAsEC,MAAAA;AAAtE,KAFmB,EAGnBtB,MAHmB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,qBAAR;AAA+Bc,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AAEAJ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,kBAAR;AAA4BkB,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AAEAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACH,GApBD,CAoBE,OAAOO,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEX,kBADC;AAEPgB,MAAAA,OAAO,EACPK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACEF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADtB,GAEEF,KAAK,CAACE;AALD,KAAD,CAAR;AAOH;AACJ,CA9BM;AAgCP,OAAO,MAAMY,aAAa,GAAIC,IAAD,IAAU,OAAO1B,QAAP,EAAiB2B,QAAjB,KAA8B;AACnE,MAAI;AACF3B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AAEA,UAAM;AACJkC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA,UAAMzB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP2B,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAFjC;AADI,KAAf;AAOA,UAAM;AAAE3B,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CAAW,oBAAX,EAAiCqB,IAAjC,EAAuCxB,MAAvC,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,mBAAR;AAA6BW,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AAEAJ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,kBAAR;AAA4BkB,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AAEAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GArBD,CAqBE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,gBADC;AAEPa,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CA/BM;AAiCP,OAAO,MAAMmB,aAAa,GAAIC,GAAD,IAAS,OAAOjC,QAAP,EAAiB2B,QAAjB,KAA8B;AAClE,MAAI;AACF3B,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEjB;AADC,KAAD,CAAR;AAIA,UAAM;AACJ4C,MAAAA,SAAS,EAAE;AAACC,QAAAA;AAAD;AADP,QAEFF,QAAQ,EAFZ;AAIA,UAAMzB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP2B,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AADjC;AADI,KAAf;AAMA,UAAM;AAAE3B,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACsC,MAAN,CAAa,gBAAcD,GAA3B,EAAgC/B,MAAhC,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEhB,mBADC;AAEPqB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GArBD,CAqBE,OAAOO,KAAP,EAAc;AACd,UAAME,OAAO,GACXF,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACEF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADtB,GAEEF,KAAK,CAACE,OAHV;AAIAb,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAElB,gBADC;AAEPuB,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID;AACF,CAhCM","sourcesContent":["import {\r\n  USER_DELETE_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n} from \"../constants/userConstants\";\r\nimport axios from \"axios\";\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  //nesting functions by redux\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST }); //returns login equals to true\r\n\r\n    const config = {\r\n      //making the api request\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"/api/users/login\",\r\n      { email, password },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data }); //calling user success if login succeed\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data)); //setting local storage to user info\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL, //if the login not success set the payload to error\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = () => async (dispatch) => { //calling user logout funtion\r\n    localStorage.removeItem(\"userInfo\"); // clearing user information from localstorage\r\n    dispatch({ type: USER_LOGOUT}); //clearing from redux\r\n};\r\n//taking values from registration form\r\nexport const register = (fname, lname, email, password, mnumber, hno, street, city, province, pic) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: USER_REGISTER_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n            \"/api/users\",\r\n            {fname, lname, email, password, mnumber, hno, street, city, province, pic},\r\n            config\r\n        );\r\n\r\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\r\n        dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({\r\n          type: USER_REGISTER_FAIL,\r\n          payload: \r\n          error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_UPDATE_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo},\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\"/api/users/profile\", user, config);\r\n\r\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteProfile = (_id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DELETE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: {userInfo},\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete('/api/users/'+_id, config);\r\n\r\n    dispatch({\r\n      type: USER_DELETE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message = \r\n      error.response && error.response.data.message\r\n      ? error.response.data.message\r\n      : error.message;\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n "]},"metadata":{},"sourceType":"module"}